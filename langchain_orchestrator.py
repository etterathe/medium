from operator import itemgetter
from langchain.schema import Document
from langchain.sql_database import SQLDatabase
from langchain_experimental.sql import SQLDatabaseChain
from langchain.chains import create_sql_query_chain
from langchain_community.tools.sql_database.tool import QuerySQLDataBaseTool
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain.memory import ChatMessageHistory

class LangChainOrchestrator:
    def __init__(self, llm, db_connector, vector_store):
        self.llm = llm
        self.db_connector = db_connector
        self.vector_store = vector_store
        self.sql_database = SQLDatabase(engine=db_connector.engine)
        self.sql_query_chain = create_sql_query_chain(llm, self.sql_database)
        self.answer_template = PromptTemplate.from_template(
             """Given the following user question, corresponding SQL query, and SQL result, answer the user question.

         Question: {question}
         SQL Query: {query}
         SQL Result: {result}
         Answer: """)
        self.execute_query = QuerySQLDataBaseTool(db=self.sql_database)
        self.answer_rephrase = self.answer_template | llm | StrOutputParser()


    def create_chain(self):
        """
        Creates a chain that includes the SQL query execution and answer rephrasing steps.
        """
        chain = (
            self.sql_query_chain.apply(lambda x: {"query": x})
            .apply(lambda inputs: {"result": self.execute_query(inputs["query"])})
            | self.answer_rephrase
        )
        return chain


    def add_schema_to_vector_store(self):
        """
        Adds the schema of the SQL database tables to the vector store.
        """
        schema = self.sql_database.get_table_info()
        self.vector_store.add_texts([schema])

    def create_history(self, messages):
        """
        Creates a ChatMessageHistory object from a list of message dictionaries.
        """
        history = ChatMessageHistory()
        for message in messages:
            if message["role"] == "user":
                history.add_user_message(message["content"])
            else:
                history.add_ai_message(message["content"])
        return history

    def invoke_chain(self, question, messages):
        """
        Invokes the chain with a given question and chat history to generate a response.

        Args:
            question (str): The user's question to be answered.
            messages (List[Dict]): A list of message dictionaries representing the chat history.

        Returns:
            str: The AI's response generated by invoking the chain.
        """
        chain = self.create_chain()
        history = self.create_history(messages)
        response = chain.invoke({"question": question, "top_k": 3, "messages": history.messages})
        history.add_user_message(question)
        history.add_ai_message(response)
        return response
